version: 0.2

env:
  variables:
    AWS_REGION: "us-east-1"

phases:
  install:
    runtime-versions:
      docker: 18
    commands:
      - echo Installing app dependencies...
      - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.15.10/2020-02-22/bin/linux/amd64/kubectl   
      - chmod +x ./kubectl
      - echo $HOME
      - mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
      - echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
      - . ~/.bashrc
      - curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/aws-iam-authenticator
      - chmod +x ./aws-iam-authenticator
      - mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$HOME/bin:$PATH
      - aws-iam-authenticator help
  pre_build:
    commands:
      - echo Logging in to Amazon EKS...
      - aws eks --region $AWS_REGION update-kubeconfig --name $AWS_CLUSTER_NAME
      - echo Logging in to ECR
      - >
        aws ecr get-login-password --region $AWS_REGION \
          | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
  build:
    commands:
      - docker login -u divyavgirase -p $DOCKER_SECRET
      - docker-compose up -d --build
      - echo Building images...
      - >
        docker build \
          -f Dockerfile \
          -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/uber-python:$CODEBUILD_RESOLVED_SOURCE_VERSION \
          .

  post_build:
    commands:
    - echo Pushing prod images to ECR...
    - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/uber-python:$CODEBUILD_RESOLVED_SOURCE_VERSION
    - cd $CODEBUILD_SRC_DIR
    
    - echo Installing metric server
    - kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml    
    
    - echo Applying deployments
    - export CODEBUILD_RESOLVED_SOURCE_VERSION=$CODEBUILD_RESOLVED_SOURCE_VERSION
    - kubectl apply -f deployments/backend-alb.yaml
    - envsubst < deployments/backend-deployment.yaml | kubectl apply -f -

    - echo Installing prometheus
    - kubectl create -f deployments/clusterRole.yaml --namespace=monitoring
    - kubectl create -f deployments/config-map.yaml --namespace=monitoring
    - kubectl create -f deployments/prometheus-deployment.yaml --namespace=monitoring
    - kubectl create -f deployments/prometheus-service.yaml --namespace=monitoring
    
    - echo Installing grafana
    - kubectl create -f deployments/grafana-datasource-config.yaml
    - kubectl create -f deployments/grafana-datasource-deploy.yaml
    - kubectl create -f deployments/grafana-datasource-service.yaml